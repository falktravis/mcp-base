# Dockerfile.backend

# Base image
FROM node:22-alpine AS base

# Set working directory
WORKDIR /usr/src/app

# --- Development Stage ---
FROM base AS development

# Copy root package.json and lockfile
COPY package.json package-lock.json ./

# Create package directories and copy their manifests
RUN mkdir -p packages/backend packages/shared-types
COPY packages/backend/package.json ./packages/backend/
COPY packages/shared-types/package.json ./packages/shared-types/

# Copy the rest of the monorepo source code
COPY . .

# Install all dependencies using npm
RUN npm ci

# Set default command for development (will be overridden by docker-compose)
CMD [ "npm", "run", "dev", "--workspace=backend" ]


# --- Builder Stage ---
FROM base AS builder

# Copy root package.json and lockfile
COPY package.json package-lock.json ./

# Create package directories and copy their manifests
RUN mkdir -p packages/backend packages/shared-types
COPY packages/backend/package.json ./packages/backend/
COPY packages/shared-types/package.json ./packages/shared-types/

# Copy the rest of the monorepo source code
COPY . .

# Install only production dependencies for backend and its dependencies
RUN npm ci

# Build backend (and shared-types as it's a dependency)
RUN npm run build --workspace=backend


# --- Production Stage ---
FROM node:22-alpine AS production

WORKDIR /usr/src/app

# Copy root package.json (needed for workspace structure)
COPY package.json ./

# Copy production dependencies from builder stage
COPY --from=builder /usr/src/app/node_modules ./node_modules

# Copy built backend application from builder stage
COPY --from=builder /usr/src/app/packages/backend ./packages/backend
COPY --from=builder /usr/src/app/packages/shared-types ./packages/shared-types


# Expose port
EXPOSE 3001

# Set environment variables (can be overridden)
ENV NODE_ENV=production
ARG DATABASE_URL
ENV DATABASE_URL=${DATABASE_URL}

# Start command
CMD [ "node", "packages/backend/dist/index.js" ]
